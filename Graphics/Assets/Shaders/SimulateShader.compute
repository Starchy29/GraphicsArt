#pragma kernel UpdateAgents
#pragma kernel DiffuseTrail
#pragma kernel FollowAgentTrails

struct Agent {
    float2 position;
    float2 direction;
};

struct SimSettings {
    float moveSpeed;
    float turnSpeed;
    float fadeRate;
    float blurRate;
    float senseRange;
    float senseRotation;
};

RWStructuredBuffer<SimSettings> settings;

RWStructuredBuffer<Agent> _Agents;
int numAgents;
float totalTime;
float deltaTime;
float3 agentColor;

int pixelWidth;
int pixelHeight;
RWTexture2D<float4> _Texture;
RWTexture2D<float4> _PostProcessTexture;

bool isInTexture(int2 pixel) {
    return pixel.x >= 0 && pixel.y >= 0 && pixel.x < pixelWidth && pixel.y < pixelHeight;
}

float2 getUnitVec(float angle) {
    return float2(cos(angle), sin(angle));
}

// https://gist.github.com/keijiro/ee7bc388272548396870
float getRandom(float2 uv)
{
    return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453);
}

[numthreads(16, 1, 1)]
void UpdateAgents(uint3 id : SV_DispatchThreadID)
{
    if(id.x >= numAgents) {
        return;
    }

    Agent agent = _Agents[id.x];

    // move
    agent.position += agent.direction * settings[0].moveSpeed * deltaTime;

    // bounce against the edge
    //if(agent.position.x < 0 || agent.position.x >= pixelWidth) {
    //    agent.position.x = clamp(agent.position.x, 0, pixelWidth - 1);
    //    agent.direction.x *= -1;
    //}
    //if(agent.position.y < 0 || agent.position.y >= pixelHeight) {
    //    agent.position.y = clamp(agent.position.y, 0, pixelHeight - 1);
    //    agent.direction.y *= -1;
    //}

    // loop around the edge
    if(agent.position.x < 0) {
        agent.position.x += pixelWidth;
    }
    else if(agent.position.x >= pixelWidth) {
        agent.position.x -= pixelWidth;
    }
    if(agent.position.y < 0) {
        agent.position.y += pixelHeight;
    }
    else if(agent.position.y >= pixelHeight) {
        agent.position.y -= pixelHeight;
    }

    _Agents[id.x] = agent;

    // place pixel
    int pixelX = round(agent.position.x);
    int pixelY = round(agent.position.y);
    int2 pixelPos = int2(pixelX, pixelY);
    _Texture[pixelPos] = float4(agentColor, 1);
}

#define SENSE_RADIUS 1
float getTrailWeight(float2 position) {
    float total;
    int2 middle = int2(round(position.x), round(position.y));

    for(int dx = -SENSE_RADIUS; dx <= SENSE_RADIUS; dx++) {
        for(int dy = -SENSE_RADIUS; dy <= SENSE_RADIUS; dy++) {
            int2 pixel = middle + int2(dx, dy);
            if(isInTexture(pixel)) {
                float4 color = _Texture[pixel];
                total += color.x + color.y + color.z;
            }
        }
    }

    return total;
}

[numthreads(16, 1, 1)]
void FollowAgentTrails(uint3 id : SV_DispatchThreadID)
{
    if(id.x >= numAgents) {
        return;
    }

    Agent agent = _Agents[id.x];

    float angle = atan2(agent.direction.y, agent.direction.x);

    float midWeight = getTrailWeight(agent.position + settings[0].senseRange * agent.direction);
    float leftWeight = getTrailWeight(agent.position + settings[0].senseRange * getUnitVec(angle + settings[0].senseRotation));
    float rightWeight = getTrailWeight(agent.position + settings[0].senseRange * getUnitVec(angle - settings[0].senseRotation));

    float randScale = 2 * getRandom(agent.position / float2(pixelWidth, pixelHeight) * totalTime);
    if(midWeight > rightWeight && midWeight > leftWeight) {
        // continue straight
    }
    else if(rightWeight > midWeight && leftWeight > midWeight) {
        angle += (randScale - 1.0f) * settings[0].turnSpeed * deltaTime; // random spin when influenced to the right and left
    }
    else if(rightWeight > leftWeight) {
        angle += -1 * randScale * settings[0].turnSpeed * deltaTime;
    }
    else if(leftWeight > rightWeight) {
        angle += randScale * settings[0].turnSpeed * deltaTime;
    }
    
    agent.direction = getUnitVec(angle);

    _Agents[id.x] = agent;
}

#define BLUR_RADIUS 1
[numthreads(8, 8, 1)]
void DiffuseTrail(uint3 id : SV_DispatchThreadID)
{
    // exit if outisde the bounds
    if(!isInTexture(id.xy)) {
        return;
    }

    float4 totalColor = 0;
    int pixelCount = 0;

    for(int dx = -BLUR_RADIUS; dx <= BLUR_RADIUS; dx++) {
        for(int dy = -BLUR_RADIUS; dy <= BLUR_RADIUS; dy++) {
            int2 pixel = int2(id.x + dx, id.y + dy);
            if(isInTexture(pixel)) {
                totalColor += _Texture[pixel];
                pixelCount++;
            }
        }
    }

    float4 blurColor = totalColor / pixelCount;
    float blurWeight = settings[0].blurRate * deltaTime;
    float4 blendedColor = (1 - blurWeight) * _Texture[id.xy] + blurWeight * blurColor;
    blendedColor = max(0, blendedColor - settings[0].fadeRate * deltaTime);

    _PostProcessTexture[id.xy] = blendedColor;
}